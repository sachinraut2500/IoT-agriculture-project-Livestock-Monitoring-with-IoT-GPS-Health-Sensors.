# -*- coding: utf-8 -*-
"""IoT agriculture project: Livestock Monitoring with IoT + GPS + Health Sensors.

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CEo7FKOrRJUiQ__kUVIKY5HE8EXWizH2
"""

"""
Livestock Monitoring IoT üêÑüì°
--------------------------------
- ESP32 Node: Reads GPS + Body Temp + Heart Rate sensors
- Raspberry Pi Gateway: Logs data, raises alerts
- Communication: MQTT (test.mosquitto.org)
"""

# ====================================================
# === ESP32 (MicroPython) Code - livestock_node.py
# ====================================================

import machine, time
import network
from umqtt.simple import MQTTClient
import random  # simulate sensor values (replace with GPS + MAX30100)

BROKER = "test.mosquitto.org"
TOPIC = b"farm/livestock"

def connect_wifi():
    wlan = network.WLAN(network.STA_IF)
    wlan.active(True)
    wlan.connect("your-SSID", "your-PASSWORD")
    while not wlan.isconnected():
        time.sleep(1)
    print("‚úÖ WiFi Connected")

def main():
    connect_wifi()
    client = MQTTClient("livestock-node", BROKER)
    client.connect()
    print("üì° Connected to MQTT broker")

    while True:
        # Simulated GPS coordinates
        lat = 28.7041 + random.uniform(-0.001, 0.001)
        lon = 77.1025 + random.uniform(-0.001, 0.001)

        # Simulated health data
        temp = random.uniform(36.5, 39.5)   # ¬∞C
        heart_rate = random.randint(60, 120)

        data = f"{lat},{lon},{temp},{heart_rate}"
        client.publish(TOPIC, data)
        print("Sent:", data)
        time.sleep(15)

main()


# ====================================================
# === Raspberry Pi Gateway - livestock_gateway.py
# ====================================================

import paho.mqtt.client as mqtt
import time, csv

BROKER = "test.mosquitto.org"
TOPIC = "farm/livestock"
LOGFILE = "livestock_log.csv"

def on_connect(client, userdata, flags, rc):
    print("‚úÖ Connected to MQTT Broker")
    client.subscribe(TOPIC)

def on_message(client, userdata, msg):
    lat, lon, temp, hr = msg.payload.decode().split(",")
    lat, lon, temp, hr = float(lat), float(lon), float(temp), int(hr)
    print(f"üì• Animal Data - GPS({lat:.5f}, {lon:.5f}) | Temp:{temp}¬∞C | HR:{hr} bpm")

    # Save to CSV
    with open(LOGFILE, "a") as f:
        writer = csv.writer(f)
        writer.writerow([time.time(), lat, lon, temp, hr])

    # Alerts
    if temp > 39:
        print("‚ö†Ô∏è ALERT: Animal Fever Detected!")
    if hr < 50 or hr > 110:
        print("‚ö†Ô∏è ALERT: Abnormal Heart Rate!")
    if not (28.703 < lat < 28.705 and 77.101 < lon < 77.104):
        print("üö® ALERT: Animal Out of Safe Zone!")

client = mqtt.Client()
client.on_connect = on_connect
client.on_message = on_message
client.connect(BROKER, 1883, 60)
client.loop_forever()